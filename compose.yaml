name: 'cryptiq'

services:
  frontend:
    build:
      context: 'frontend'
    container_name: 'cryptiq-frontend'
    depends_on:
      backend:
        condition: 'service_healthy'
    ports:
      - '5000:8080'
    restart: 'always'

  backend:
    build:
      context: 'backend'
    container_name: 'cryptiq-backend'
    depends_on:
      supertokens:
        condition: 'service_healthy'
      db:
        condition: 'service_healthy'
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:3000/healthcheck" ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - 'auth_network'
      - 'db_network'
    ports:
      - '3000:3000'
    restart: 'always'

  mysql:
    container_name: 'cryptiq-auth-database'
    environment:
      MYSQL_ROOT_PASSWORD: ${AUTH_MYSQL_ROOT_PASSWORD}
      MYSQL_USER: ${AUTH_MYSQL_USER}
      MYSQL_PASSWORD: ${AUTH_MYSQL_PASSWORD}
      MYSQL_DATABASE: ${AUTH_MYSQL_DATABASE}
    healthcheck:
      retries: 10
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      timeout: '20s'
    image: 'mysql:latest'
    networks:
      - 'auth_network'
    ports:
      - '3306:3306'
    restart: 'always'
    volumes:
      - 'mysql:/var/lib/mysql'

  supertokens:
    container_name: 'cryptiq-supertokens'
    depends_on:
      mysql:
        condition: 'service_healthy'
    environment:
      MYSQL_CONNECTION_URI: ${SUPERTOKENS_MYSQL_CONNECTION_URI}
      API_KEYS: ${SUPERTOKENS_API_KEY}
    healthcheck:
      test: >
        bash -c 'exec 3<>/dev/tcp/127.0.0.1/3567 && echo -e "GET /hello HTTP/1.1\r\nhost: 127.0.0.1:3567\r\nConnection: close\r\n\r\n" >&3 && cat <&3 | grep "Hello"'
      interval: 10s
      timeout: 5s
      retries: 5
    image: 'registry.supertokens.io/supertokens/supertokens-mysql'
    networks:
      - 'auth_network'
    ports:
      - '3567:3567'
    restart: 'unless-stopped'

  db:
    container_name: "cryptiq-db"
    image: postgres
    restart: always
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - 'db_network'
    volumes:
      - postgres:/var/lib/postgresql/data
    ports:
      - "5432:5432"

networks:
  auth_network:
    driver: 'bridge'
  db_network:
    driver: 'bridge'

volumes:
  postgres:
  mysql: